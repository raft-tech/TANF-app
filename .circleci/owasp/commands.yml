# commands:
  run-owasp-scan:
    description: Runs OWASP ZAP scanner and stores resulting artifacts.
    parameters:
      environment:
        description: The environment this script is being run for.
        type: enum
        enum: ["circle", "nightly"]
      target:
        description: The target application to be scanned.
        type: enum
        enum: ["backend", "frontend"]
      target_env:
        description: The target environment to be scanned.
        type: enum
        default: "develop"
        enum: ["staging", "develop", "prod"]
    steps:
      - run:
          name: Execute OWASP ZAP vulnerability scan
          #wait up to 60min for scan
          no_output_timeout: 60m
          command: ./scripts/zap-scanner.sh <<parameters.target>> <<parameters.environment>> <<parameters.target_env>>
      - store_artifacts:
          path: tdrs-<<parameters.target>>/reports/owasp_report.html


  save-owasp-scan-results:
    parameters:
      target_env:
            description: The target environment to be scanned.
            type: enum
            default: "develop"
            enum: ["staging", "develop", "prod"]
    steps:
      - run:
          name: Run post-processing task to record OWASP ZAP results
          command: |
            # Construct the project slug from the current branch name and user
            PROJECT_SLUG=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
            # These environment variables are exported to Circle CI's BASH_ENV
            # by the zap-scanner.sh script for each respective app target.
            CMD_ARGS=(
              "$CIRCLE_BUILD_NUM"
              --backend-pass-count "${ZAP_BACKEND_PASS_COUNT:-0}"
              --backend-warn-count "${ZAP_BACKEND_WARN_COUNT:-0}"
              --backend-fail-count "${ZAP_BACKEND_FAIL_COUNT:-0}"
              --frontend-pass-count "${ZAP_FRONTEND_PASS_COUNT:-0}"
              --frontend-warn-count "${ZAP_FRONTEND_WARN_COUNT:-0}"
              --frontend-fail-count "${ZAP_FRONTEND_FAIL_COUNT:-0}"
              --project-slug "$PROJECT_SLUG"
            )
            # Evaluate the full command before passing it in so it doesn't
            # get improperly interpolated by Cloud.gov.
            CMD="python manage.py process_owasp_scan ${CMD_ARGS[*]}"
            # Submit a CF Task for execution after a 4 minute sleep to ensure all of the scan's previous state has been closed.
            # sleep 240
            cf run-task tdp-backend-<< parameters.target_env >> \
              --command "$CMD" \
              --name nightly-owasp-scan

  docker-compose-up-frontend:
    steps:
      - run:
          name: Build and spin-up React application
          command: |
            cd tdrs-frontend
            if [ $(docker network inspect external-net 2>&1 | grep -c Scope) == 0 ]; then
            docker network create external-net
            fi
            docker-compose up -d --build
