version: 2.1

orbs:
  node: circleci/node@4.2.1

executors:
  docker-executor:
    docker:
      - image: cimg/python:3.8.10
        user: root
  machine-executor:
    machine:
      docker_layer_caching: false

commands:
  ###
  # General re-usable commands
  #
  cf-check:
    steps:
      - run:
          name: Ensure cf cli is installed, otherwise install it.
          command: ./scripts/cf-check.sh

  docker-compose-check:
    steps:
      - run:
          name: Ensure docker-compose exists,otherwise install it.
          command: ./scripts/docker-compose-check.sh

  # This allows us to use the orb stanza for node/install within other commands
  # NOTE: This doesn't work correctly on machine executors
  install-nodejs: node/install

  # This allows us to use the node orb to install packages within other commands
  install-nodejs-packages: node/install-packages

  install-nodejs-machine:
    description: |
      Installs our target version of Node.JS using NVM (Node Version Manager)
      from the install location provided by machine executor images.
    steps:
      - run:
          name: Install Node.JS
          command: |
            source /opt/circleci/.nvm/nvm.sh
            nvm install v12.18
            nvm alias default v12.18
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo "[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"" >> $BASH_ENV

  sudo-check:
    steps:
      - run:
          name: Ensure sudo is installed, otherwise install it.
          command: ./scripts/sudo-check.sh

  ###
  # Deployment commands
  #
  login-cloud-dot-gov:
    description: Authenticates with Cloud.gov and sets org and space targets
    parameters:
      cf-password:
        type: env_var_name
        default: CF_PASSWORD_DEV
      cf-org:
        type: env_var_name
        default: CF_ORG
      cf-space:
        type: string
        default: tanf-dev
      cf-username:
        type: env_var_name
        default: CF_USERNAME_DEV
    steps:
      - run:
          name: Login to Cloud.gov and set application targets
          command: |
            cf login -a https://api.fr.cloud.gov \
              -u ${<<parameters.cf-username>>} \
              -p ${<<parameters.cf-password>>} \
              -o ${<<parameters.cf-org>>} \
              -s <<parameters.cf-space>>

  get-app-deploy-strategy:
    parameters:
      appname:
        type: string
    steps:
      - run:
          name: Determine deploy strategy
          command: |
            # NOTE: The || true is a no-op included to suppress exit codes which
            #       would cause the step to exit early due to use of pipefail
            APP_GUID=$(cf app <<parameters.appname>> --guid || true)
            if [ "$APP_GUID" == "FAILED" ]; then
              echo "export DEPLOY_STRATEGY=initial" >> $BASH_ENV
            else
              echo "export DEPLOY_STRATEGY=rolling" >> $BASH_ENV
            fi

  deploy-backend:
    parameters:
      backend-appname:
        default: tdp-backend
        type: string
    steps:
      - get-app-deploy-strategy:
          appname: <<parameters.backend-appname>>
      - run:
          name: Deploy backend application
          command: |
            bash ./scripts/deploy-backend.sh \
              $DEPLOY_STRATEGY \
              <<parameters.backend-appname>>

  deploy-clamav:
    parameters:
      backend-appname:
        default: tdp-backend
        type: string
      cf-org:
        default: CF_ORG
        type: env_var_name
      cf-space:
        default: tanf-dev
        type: string
    steps:
      - run:
          name: Delete existing ClamAV REST application
          command: cf delete -r clamav-rest -f
      - run:
          name: Deploy ClamAV REST application
          command: |
            cf push clamav-rest -f tdrs-backend/manifest.clamav.yml \
              --var cf-space=<<parameters.cf-space>>
      - run:
          name: Enable internal route between backend and clamav-rest apps
          command: |
            cf add-network-policy <<parameters.backend-appname>> clamav-rest \
              -s <<parameters.cf-space>> \
              -o ${<<parameters.cf-org>>} \
              --protocol tcp \
              --port 9000

  deploy-frontend:
    parameters:
      backend-appname:
        default: tdp-backend
        type: string
      frontend-appname:
        default: tdp-frontend
        type: string
    steps:
      - install-nodejs:
          install-yarn: true
          node-version: "12.18"
      - install-nodejs-packages:
          app-dir: tdrs-frontend
          pkg-manager: yarn
      - get-app-deploy-strategy:
          appname: <<parameters.frontend-appname>>
      - run:
          name: Deploy frontend application
          command: |
            bash ./scripts/deploy-frontend.sh \
              $DEPLOY_STRATEGY \
              <<parameters.frontend-appname>> \
              <<parameters.backend-appname>>

  deploy-cloud-dot-gov:
    parameters:
      backend-appname:
        default: tdp-backend
        type: string
      cf-password:
        default: CF_PASSWORD_DEV
        type: env_var_name
      cf-org:
        default: CF_ORG
        type: env_var_name
      cf-space:
        default: tanf-dev
        type: string
      cf-username:
        default: CF_USERNAME_DEV
        type: env_var_name
      frontend-appname:
        default: tdp-frontend
        type: string
    steps:
      - checkout
      - sudo-check
      - cf-check
      - login-cloud-dot-gov:
          cf-password: <<parameters.cf-password>>
          cf-org: <<parameters.cf-org>>
          cf-space: <<parameters.cf-space>>
          cf-username: <<parameters.cf-username>>
      - deploy-backend:
          backend-appname: <<parameters.backend-appname>>
      - deploy-clamav:
          backend-appname: <<parameters.backend-appname>>
          cf-org: <<parameters.cf-org>>
          cf-space: <<parameters.cf-space>>
      - deploy-frontend:
          backend-appname: <<parameters.backend-appname>>
          frontend-appname: <<parameters.frontend-appname>>

jobs:
  test-backend:
    executor: machine-executor
    branches:
    steps:
      - checkout
      - docker-compose-check
      - run:
          name: "Test: Build and Spin-up Django API Service"
          command: "cd tdrs-backend; docker-compose up -d --build"
      - run:
          name: "Test: Run Unit Tests And Create Code Coverage Report"
          command: "cd tdrs-backend; docker-compose run --rm web bash -c \"pytest --cov-report=xml\""
      - run:
          name: "Upload Backend Coverage Report to CodeCov If On Target Branch"
          command: |
            if [ "$CIRCLE_BRANCH" == "main" ] ; then
              cd tdrs-backend; bash <(curl -s https://codecov.io/bash)  -f ./coverage.xml -F main-backend
            elif [ "$CIRCLE_BRANCH" == "raft-tdp-main" ] ; then
              cd tdrs-backend; bash <(curl -s https://codecov.io/bash)  -f ./coverage.xml -F dev-backend
            fi
      - run:
          name:  "Test: Execute Python Linting Test"
          command: "cd tdrs-backend; docker-compose run --rm web bash -c \"flake8 .\""
      - run:
          name:  "Test: Execute Python OWASP ZAP Vulnerability Scan"
          command: "cd tdrs-backend; ./zap-scanner.sh"
      - store_artifacts:
          path: tdrs-backend/reports/owasp_report.html

  test-frontend:
    executor: machine-executor
    working_directory: ~/tdp-apps
    steps:
      - checkout
      - docker-compose-check
      - install-nodejs-machine
      - node/install-yarn
      - install-nodejs-packages:
          app-dir: tdrs-frontend
          cache-path: ~/.cache
          pkg-manager: yarn
      - run:
          name: "Run ESLint"
          command: "cd tdrs-frontend; yarn lint"
      - run:
          name: "Run Pa11y Accessibility Tests"
          command: "cd tdrs-frontend; yarn test:accessibility"
      - run:
          name: "Run Jest Unit Tests"
          command: "cd tdrs-frontend; yarn test:ci"
      - run:
          name: "Upload Frontend Coverage Report to CodeCov If Target Branch"
          command: |
            if [ "$CIRCLE_BRANCH" == "main" ] ; then
              cd tdrs-frontend; bash <(curl -s https://codecov.io/bash)  -f ./coverage/lcov.info -F main-frontend
            elif [ "$CIRCLE_BRANCH" == "raft-tdp-main" ] ; then
              cd tdrs-frontend; bash <(curl -s https://codecov.io/bash)  -f ./coverage/lcov.info -F dev-frontend
            fi
      - run:
          name: "Run Cypress Integration Tests"
          command: "cd tdrs-frontend; yarn cy:run:ci"
      - run:
          name:  "Test: Execute Frontend  OWASP ZAP Vulnerability Scan"
          command: "cd tdrs-frontend; ./zap-scanner.sh"
      - store_artifacts:
          path: tdrs-frontend/reports/owasp_report.html

  deploy-dev:
    executor: docker-executor
    working_directory: ~/tdp-deploy
    steps:
      - deploy-cloud-dot-gov

  deploy-staging:
    working_directory: ~/tdp-deploy
    executor: docker-executor
    steps:
      - deploy-cloud-dot-gov:
          backend-appname: tdp-backend-staging
          frontend-appname: tdp-frontend-staging
          cf-password: CF_PASSWORD_STAGING
          cf-space: tanf-staging
          cf-username: CF_USERNAME_STAGING

  deploy-prod:
    executor: docker-executor
    working_directory: ~/tdp-deploy
    steps:
      - deploy-cloud-dot-gov:
          backend-appname: tdp-backend-prod
          cf-password: CF_PASSWORD_PROD
          cf-space: tanf-prod
          cf-username: CF_USERNAME_PROD
          frontend-appname: tdp-frontend-prod

workflows:
  build-and-test:
    jobs:
      - test-backend
      - test-frontend
      - deploy-dev:
          requires:
            - test-backend
            - test-frontend
          filters:
            branches:
              only:
                - raft-review
                - raft-tdp-main
