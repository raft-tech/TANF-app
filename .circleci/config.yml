version: 2.1

orbs:
  node: circleci/node@4.2.1
  terraform: circleci/terraform@2.1.0
  jq: circleci/jq@2.2.0

executors:
  docker-executor:
    docker:
      - image: cimg/python:3.8.10
        user: root
  machine-executor:
    machine:
      docker_layer_caching: false
      image: ubuntu-2004:202104-01

commands:
  ###
  # General re-usable commands
  #
  cf-check:
    steps:
      - run:
          name: Ensure cf cli is installed, otherwise install it.
          command: ./scripts/cf-check.sh

  docker-compose-check:
    steps:
      - run:
          name: Ensure docker-compose exists, otherwise install it.
          command: ./scripts/docker-compose-check.sh

  # This allows us to use the orb stanza for node/install within other commands
  # NOTE: This doesn't work correctly on machine executors
  install-nodejs: node/install

  # This allows us to use the node orb to install packages within other commands
  install-nodejs-packages: node/install-packages

  install-nodejs-machine:
    description: |
      Installs our target version of Node.JS using NVM (Node Version Manager)
      from the install location provided by machine executor images.
    steps:
      - run:
          name: Install Node.JS
          command: |
            source /opt/circleci/.nvm/nvm.sh
            nvm install v12.18
            nvm alias default v12.18
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo "[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"" >> $BASH_ENV

  sudo-check:
    steps:
      - run:
          name: Ensure sudo is installed, otherwise install it.
          command: ./scripts/sudo-check.sh

  upload-codecov:
    description: Uploads testing code coverage results to Codecov
    parameters:
      component:
        description: The component of the application being tested, either backend or frontend.
        type: enum
        enum: ["backend", "frontend"]
      coverage-report:
        description: The path to the coverage report being uploaded.
        type: string
    steps:
      - run:
          name: Ensure Codecov uploader is installed, otherwise install it.
          command: ./scripts/codecov-check.sh
      - run:
          name: Determine Codecov metric flag
          command: |
            if [ "$CIRCLE_BRANCH" == "main" ] ; then
              CURRENT_FLAG=main-<<parameters.component>>
            else
              CURRENT_FLAG=dev-<<parameters.component>>
            fi
            echo "export CURRENT_FLAG=$CURRENT_FLAG" >> $BASH_ENV
      - run:
          name: Upload code coverage report if target branch
          command: codecov -t "$CODECOV_TOKEN" -f <<parameters.coverage-report>> -F "$CURRENT_FLAG"

  ###
  # Deployment commands
  #
  login-cloud-dot-gov:
    description: Authenticates with Cloud.gov and sets org and space targets
    parameters:
      cf-password:
        type: env_var_name
        default: CF_PASSWORD_DEV
      cf-org:
        type: env_var_name
        default: CF_ORG
      cf-space:
        type: string
        default: tanf-dev
      cf-username:
        type: env_var_name
        default: CF_USERNAME_DEV
    steps:
      - run:
          name: Login to Cloud.gov and set application targets
          command: |
            cf login -a https://api.fr.cloud.gov \
              -u ${<<parameters.cf-username>>} \
              -p ${<<parameters.cf-password>>} \
              -o ${<<parameters.cf-org>>} \
              -s <<parameters.cf-space>>

  get-app-deploy-strategy:
    parameters:
      appname:
        type: string
    steps:
      - run:
          name: Determine deploy strategy
          command: |
            # NOTE: The || true is a no-op included to suppress exit codes which
            #       would cause the step to exit early due to use of pipefail
            APP_GUID=$(cf app <<parameters.appname>> --guid || true)
            if [ "$APP_GUID" == "FAILED" ]; then
              echo "export DEPLOY_STRATEGY=initial" >> $BASH_ENV
            else
              echo "export DEPLOY_STRATEGY=rolling" >> $BASH_ENV
            fi

  deploy-backend:
    parameters:
      backend-appname:
        default: tdp-backend
        type: string
    steps:
      - get-app-deploy-strategy:
          appname: <<parameters.backend-appname>>
      - run:
          name: Deploy backend application
          command: |
            bash ./scripts/deploy-backend.sh \
              $DEPLOY_STRATEGY \
              <<parameters.backend-appname>>

  deploy-clamav:
    parameters:
      backend-appname:
        default: tdp-backend
        type: string
      cf-org:
        default: CF_ORG
        type: env_var_name
      cf-space:
        default: tanf-dev
        type: string
    steps:
      - run:
          name: Delete existing ClamAV REST application
          command: cf delete -r clamav-rest -f
      - run:
          name: Deploy ClamAV REST application
          command: |
            cf push clamav-rest -f tdrs-backend/manifest.clamav.yml \
              --var cf-space=<<parameters.cf-space>>
      - run:
          name: Enable internal route between backend and clamav-rest apps
          command: |
            cf add-network-policy <<parameters.backend-appname>> clamav-rest \
              -s <<parameters.cf-space>> \
              -o ${<<parameters.cf-org>>} \
              --protocol tcp \
              --port 9000

  deploy-frontend:
    parameters:
      backend-appname:
        default: tdp-backend
        type: string
      frontend-appname:
        default: tdp-frontend
        type: string
    steps:
      - install-nodejs:
          install-yarn: true
          node-version: "12.18"
      - install-nodejs-packages:
          app-dir: tdrs-frontend
          pkg-manager: yarn
      - get-app-deploy-strategy:
          appname: <<parameters.frontend-appname>>
      - run:
          name: Deploy frontend application
          command: |
            bash ./scripts/deploy-frontend.sh \
              $DEPLOY_STRATEGY \
              <<parameters.frontend-appname>> \
              <<parameters.backend-appname>>

  deploy-cloud-dot-gov:
    parameters:
      backend-appname:
        default: tdp-backend
        type: string
      cf-password:
        default: CF_PASSWORD_DEV
        type: env_var_name
      cf-org:
        default: CF_ORG
        type: env_var_name
      cf-space:
        default: tanf-dev
        type: string
      cf-username:
        default: CF_USERNAME_DEV
        type: env_var_name
      frontend-appname:
        default: tdp-frontend
        type: string
    steps:
      - checkout
      - sudo-check
      - cf-check
      - login-cloud-dot-gov:
          cf-password: <<parameters.cf-password>>
          cf-org: <<parameters.cf-org>>
          cf-space: <<parameters.cf-space>>
          cf-username: <<parameters.cf-username>>
      - deploy-backend:
          backend-appname: <<parameters.backend-appname>>
      - deploy-clamav:
          backend-appname: <<parameters.backend-appname>>
          cf-org: <<parameters.cf-org>>
          cf-space: <<parameters.cf-space>>
      - deploy-frontend:
          backend-appname: <<parameters.backend-appname>>
          frontend-appname: <<parameters.frontend-appname>>

  deploy-infrastructure:
    parameters:
      tf-path:
        type: string
        default: ./terraform/dev
      cf-password:
        type: env_var_name
        default: CF_PASSWORD_DEV
      cf-username:
        type: env_var_name
        default: CF_USERNAME_DEV
      cf-space:
        type: string
        default: tanf-dev
      cf-org:
        type: env_var_name
        default: CF_ORG

    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add jq
            apk add cloudfoundry-cli --repository=http://dl-cdn.alpinelinux.org/alpine/edge/testing/
      - login-cloud-dot-gov
      - run:
          name: Export S3 Credentials for TFState
          command: |
            S3_CREDENTIALS=$(cf service-key tdp-tf-states tdp-tf-key | tail -n +2)
            {
              echo "access_key = \"$(echo "${S3_CREDENTIALS}" | jq -r .access_key_id)\""
              echo "secret_key = \"$(echo "${S3_CREDENTIALS}" | jq -r .secret_access_key)\""
              echo "region = \"$(echo "${S3_CREDENTIALS}" | jq -r '.region')\""
            } >> ./backend_config.tfvars
      - run:
          name: Prepare Terraform Variables
          command: |
            {
              echo "cf_password = \"$<<parameters.cf-password>>\""
              echo "cf_user = \"$<<parameters.cf-username>>\""
              echo "cf_space_name = \"<<parameters.cf-space>>\""
            } >> ./variables.tfvars

      - terraform/init:
          path: <<parameters.tf-path>>
          backend_config_file: ./backend_config.tfvars
      - terraform/validate:
          path: <<parameters.tf-path>>
      - terraform/fmt:
          path: <<parameters.tf-path>>
      - terraform/plan:
          path: <<parameters.tf-path>>
          var_file: ./variables.tfvars
      - terraform/apply:
          path: <<parameters.tf-path>>
          var_file: ./variables.tfvars

jobs:
  secrets-check:
    executor: docker-executor
    branches:
    steps:
      - checkout
      - run:
          name: "git-secrets: Scan repository for committed secrets"
          command: ./scripts/git-secrets-check.sh
      - run:
          name: "trufflehog: Scan repository for committed secrets"
          command: ./scripts/trufflehog-check.sh $CIRCLE_BRANCH

  frontend-lint-check:
    executor: machine-executor
    working_directory: ~/tdp-apps
    steps:
      - checkout
      - docker-compose-check
      - install-nodejs-machine
      - node/install-yarn
      - run:
          name: "Run ESLint"
          command: "cd tdrs-frontend; yarn lint"

  cypress-check:
    executor: machine-executor
    working_directory: ~/tdp-apps
    steps:
      - when:
          condition: << pipline.parameters.cypress >>
          steps:
            - run:
                name: "Run Cypress Integration Tests"
                command: |
                  sudo apt-get update
                  sudo apt-get install -y libgbm-dev
                  cd tdrs-frontend;
                  yarn cy:run:ci
  jest-check:
    executor: machine-executor
    working_directory: ~/tdp-apps
    steps:
      - checkout
      - docker-compose-check
      - install-nodejs-machine
      - node/install-yarn
      - install-nodejs-packages:
          app-dir: tdrs-frontend
          cache-path: ~/.cache
          cache-version: v2
          pkg-manager: yarn

      # - when:
     #     condition:  << pipline.parameters.pa11y >>
      #     steps:
      #       - run:
      #           name: "Run Pa11y Accessibility Tests"
      #           command: "cd tdrs-frontend; mkdir pa11y-screenshots/; yarn test:accessibility"
      - run:
          name: "Run Jest Unit Tests"
          command: "cd tdrs-frontend; yarn test:ci"
      - upload-codecov:
          component: frontend
          coverage-report: ./tdrs-frontend/coverage/lcov.info
  pytest-check:
    executor: machine-executor
    parameters:
      backend-check:
        type: boolean
        default: false
    branches:
    steps:
      when:
        condition: << parameters.backend-check >>
        steps:
          - checkout
          - docker-compose-check
          - run:
              name: "Test: Run Unit Tests And Create Code Coverage Report"
              command: |
                cd tdrs-backend;
                docker-compose run --rm web bash -c "./wait_for_services.sh && pytest --cov-report=xml"
          - upload-codecov:
              component: backend
              coverage-report: ./tdrs-backend/coverage.xml

  backend-lint-check:
    executor: machine-executor
    branches:
    steps:
      - checkout
      - docker-compose-check
      - run:
          name: "Test: Execute Python Linting Test"
          command: "cd tdrs-backend; docker-compose run --rm web bash -c \"flake8 . \""


  frontend-owasp-check:
    executor: machine-executor
    steps:
      - run:
          name:  "Test: Execute Frontend  OWASP ZAP Vulnerability Scan"
          command: "./scripts/zap-scanner.sh frontend circle"
      - store_artifacts:
          path: tdrs-frontend/reports/owasp_report.html
      - store_artifacts:
          path: tdrs-frontend/pa11y-screenshots/homepage.png

      - store_artifacts:
          path: tdrs-frontend/pa11y-screenshots/edit-profile.png

      - store_artifacts:
          path: tdrs-frontend/pa11y-screenshots/request.png

      - store_artifacts:
          path: tdrs-frontend/pa11y-screenshots/login.png

      - store_artifacts:
          path: tdrs-frontend/pa11y-screenshots/data-files.png

      - store_artifacts:
          path: tdrs-frontend/pa11y-screenshots/welcome.png

  backend-owasp-check:
    executor: machine-executor
    steps:
      - checkout
      - docker-compose-check
      - run:
          name: "Test: Build and Spin-up Django API Service"
          command: "cd tdrs-backend; docker-compose up -d --build"
      - run:
          name:  "Test: Execute Python OWASP ZAP Vulnerability Scan"
          command: "./scripts/zap-scanner.sh backend circle"
      - store_artifacts:
          path: tdrs-backend/reports/owasp_report.html

  prod-owasp-scan:
    executor: machine-executor
    working_directory: ~/tdp-apps
    steps:
      - checkout
      - docker-compose-check
      - run:
          name:  "Test: Execute Frontend  OWASP ZAP Vulnerability Scan"
          command: "./scripts/zap-scanner.sh frontend nightly"
      - store_artifacts:
          path: tdrs-frontend/reports/owasp_report.html


  deploy-infrastructure-dev:
    executor: terraform/default
    working_directory: ~/tdp-deploy
    steps:
      - deploy-infrastructure

  deploy-dev:
    executor: docker-executor
    parameters:
      target-env:
        type: string
    working_directory: ~/tdp-deploy
    steps:
      - deploy-cloud-dot-gov:
          backend-appname: tdp-backend-<< parameters.target-env >>
          frontend-appname: tdp-frontend-<< parameters.target-env >>

  deploy-infrastructure-staging:
    executor: terraform/default
    working_directory: ~/tdp-deploy
    steps:
      - deploy-infrastructure:
          cf-password: CF_PASSWORD_STAGING
          cf-username: CF_USERNAME_STAGING
          cf-space: tanf-staging
          tf-path: ./terraform/staging

  deploy-staging:
    executor: docker-executor
    working_directory: ~/tdp-deploy
    steps:
      - deploy-cloud-dot-gov:
          backend-appname: tdp-backend-staging
          frontend-appname: tdp-frontend-staging
          cf-password: CF_PASSWORD_STAGING
          cf-space: tanf-staging
          cf-username: CF_USERNAME_STAGING

  deploy-prod:
    executor: docker-executor
    working_directory: ~/tdp-deploy
    steps:
      - deploy-cloud-dot-gov:
          backend-appname: tdp-backend-prod
          cf-password: CF_PASSWORD_PROD
          cf-space: tanf-prod
          cf-username: CF_USERNAME_PROD
          frontend-appname: tdp-frontend-prod

parameters:
  run_dev_deployment:
    type: boolean
    default: false

  target-env:
    type: string
    default: ''

  frontend:
    type: boolean
    default: false

  backend:
    type: boolean
    default: false

  owasp:
    type: boolean
    default: false

  pa11y:
    type: boolean
    default: false

  qasp:
    type: boolean
    default: false

  cypress:
    type: boolean
    default: false
  

workflows:
  nightly:
    jobs:
      - prod-owasp-scan
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - raft-tdp-main

  build-and-test:
    unless: << pipeline.parameters.run_dev_deployment >>
    jobs:
      - secrets-check
      - backend-lint-check:
          requires: 
            - secrets-check

      - pytest-check:
          backend-check: << pipeline.parameters.backend >>
          requires: 
            - backend-lint-check

      # - backend-owasp-check:
      #     when:
      #       condition:
      #         and:
      #           - << pipeline.parameters.owasp >>
      #           - << pipeline.parameters.backend >>
      #     requires:
      #       - test-backend

      # - frontend-lint-check:
      #     when:
      #       condition: << pipeline.parameters.frontend >>

      #     requires:
      #       - secret-check

      # - jest-check:
      #     when: << pipeline.parameters.frontend >>
      #     requires: 
      #       - secret-check
      #       - frontend-lint-check

      # - frontend-owasp-check:
      #     when:
      #       and:
      #         - << pipeline.parameters.owasp >>
      #         - << pipeline.parameters.frontend >>
      #     requires:
      #       - secret-check
      #       - jest-check

      # - pa11y-check:
      #     when:
      #       and:
      #         - << pipeline.parameters.pa11y >>
      #         - << pipeline.parameters.frontend >>
      #     requires:
      #       - secret-check
      #       - jest-check
      
      # - cypress-check:
      #     when:
      #       and:
      #         - << pipeline.parameters.cypress >>
      #         - << pipeline.parameters.frontend >>
      #     requires:
      #       - secret-check
      #       - jest-check

      - deploy-infrastructure-staging:
          filters:
            branches:
              only:
                - raft-tdp-main

      - deploy-staging:
          requires:
            - deploy-infrastructure-staging
          filters:
            branches:
              only:
                - raft-tdp-main

  dev-deployment:
    when: << pipeline.parameters.run_dev_deployment >>
    jobs:
      - deploy-infrastructure-dev
      - deploy-dev:
          target-env: << pipeline.parameters.target-env >>
          requires:
            - deploy-infrastructure-dev
