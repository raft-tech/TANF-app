version: 2.1


orbs:
  node: circleci/node@4.7.0
  terraform: circleci/terraform@2.1.0
  jq: circleci/jq@2.2.0

executors:
  docker-executor:
    docker:
      - image: cimg/python:3.10.1
        user: root
  machine-executor:
    machine:
      docker_layer_caching: false
      image: ubuntu-2004:202104-01

commands:
  ###
  # General re-usable commands
  #
  cf-check:
    steps:
      - run:
          name: Ensure cf cli is installed, otherwise install it.
          command: sudo ./scripts/cf-check.sh
          
  docker-compose-check:
    steps:
      - run:
          name: Ensure docker-compose exists, otherwise install it.
          command: ./scripts/docker-compose-check.sh

  docker-compose-up-backend:
    steps:
      - run:
          name: Build and spin-up Django API service
          command: cd tdrs-backend; docker-compose up -d --build

  login-cloud-dot-gov:
    description: Authenticates with Cloud.gov and sets org and space targets
    steps:
      - run:
          name: Login to Cloud.gov and set application targets
          command: |
            cf login -a https://api.fr.cloud.gov \
              -u ${CF_USERNAME_DEV} \
              -p ${CF_PASSWORD_DEV} \
              -o ${CF_ORG} \
              -s tanf-dev

  deploy-cloud-dot-gov:
    steps:
      - checkout
      - sudo-check
      - cf-check
      - login-cloud-dot-gov
      - deploy-backend
      - deploy-clamav
      - deploy-frontend

  deploy-backend:
    steps:
      - get-app-deploy-strategy
      - run:
          name: Deploy backend application
          command: |
            bash ./scripts/deploy-backend.sh \
              $DEPLOY_STRATEGY \
              tdp-backend-sandbox \
              tanf-dev

  deploy-frontend:
    steps:
      - install-nodejs:
          node-version: "16.13"
      - disable-npm-audit
      - install-nodejs-packages:
          app-dir: tdrs-frontend
      - get-app-deploy-strategy
      - run:
          name: Deploy frontend application
          command: |
            bash ./scripts/deploy-frontend.sh \
              $DEPLOY_STRATEGY \
              tdp-frontend-sandbox \
              tdp-backend-sandbox \
              tanf-dev

  deploy-clamav:
    steps:
      - run:
          name: Deploy ClamAV REST application
          command: |
            cf push clamav-rest -f tdrs-backend/manifest.clamav.yml \
              --var cf-space=tanf-dev \
      - run:
          name: Enable internal route between backend and clamav-rest app
          command: |
            cf add-network-policy tdp-backend-sandbox clamav-rest \
              -s tanf-dev \
              -o ${CF_ORG} \
              --protocol tcp \
              --port 9000

  get-app-deploy-strategy:
    steps:
      - run:
          name: Determine deploy strategy
          command: |
            # NOTE: The || true is a no-op included to suppress exit codes which
            #       would cause the step to exit early due to use of pipefail
            APP_GUID=$(cf app tdp-frontend-sandbox --guid || true)
            if [ "$APP_GUID" == "FAILED" ]; then
              echo "export DEPLOY_STRATEGY=initial" >> $BASH_ENV
            else
              echo "export DEPLOY_STRATEGY=rolling" >> $BASH_ENV
            fi

  disable-npm-audit:
    steps:
      - run:
          name: Disable npm audit warnings in CI
          command: npm set audit false

  # This allows us to use the orb stanza for node/install within other commands
  # NOTE: This doesn't work correctly on machine executors
  install-nodejs: node/install

  # This allows us to use the node orb to install packages within other commands
  install-nodejs-packages: node/install-packages

  sudo-check:
    steps:
      - run:
          name: Ensure sudo is installed, otherwise install it.
          command: ./scripts/sudo-check.sh
  
  upload-codecov:
    description: Uploads testing code coverage results to Codecov
    parameters:
      component:
        description: The component of the application being tested, either backend or frontend.
        type: enum
        enum: [ "backend", "frontend" ]
      coverage-report:
        description: The path to the coverage report being uploaded.
        type: string
    steps:
      - run:
          name: Ensure Codecov uploader is installed, otherwise install it.
          command: ./scripts/codecov-check.sh
      - run:
          name: Determine Codecov metric flag
          command: |
            if [ "$CIRCLE_BRANCH" == "main" ] ; then
              CURRENT_FLAG=main-<<parameters.component>>
            else
              CURRENT_FLAG=dev-<<parameters.component>>
            fi
            echo "export CURRENT_FLAG=$CURRENT_FLAG" >> $BASH_ENV
      - run:
          name: Upload code coverage report if target branch
          command: codecov -t "$CODECOV_TOKEN" -f <<parameters.coverage-report>> -F "$CURRENT_FLAG"

  install-nodejs-machine:
    description: |
      Installs our target version of Node.JS using NVM (Node Version Manager)
      from the install location provided by machine executor images.
    steps:
      - run:
          name: Install Node.JS
          command: |
            sudo apt-get update
            sudo apt-get install -y libgbm-dev
            source /opt/circleci/.nvm/nvm.sh
            nvm install v16.13
            nvm alias default v16.13
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo "[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"" >> $BASH_ENV

jobs:
  deploy-infrastructure:
    executor: terraform/default
    working_directory: ~/tdp-deploy
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add jq
            apk add curl
            # TODO: Add Signature check
            curl -L "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=v7&source=github" | tar -zx
            mv cf7 /usr/local/bin/cf
      - login-cloud-dot-gov
      - run:
          name: Export S3 Credentials for TFState
          command: |
            S3_CREDENTIALS=$(cf service-key tdp-tf-states tdp-tf-key | tail -n +2)
            {
              echo "access_key = \"$(echo "${S3_CREDENTIALS}" | jq -r .access_key_id)\""
              echo "secret_key = \"$(echo "${S3_CREDENTIALS}" | jq -r .secret_access_key)\""
              echo "region = \"$(echo "${S3_CREDENTIALS}" | jq -r '.region')\""
              echo "bucket = \"$(echo "${S3_CREDENTIALS}" | jq -r '.bucket')\""
            } >> ./backend_config.tfvars
      - run:
          name: Prepare Terraform Variables
          command: |
            S3_CREDENTIALS=$(cf service-key tdp-tf-states tdp-tf-key | tail -n +2)
            {
              echo "cf_password = \"$CF_PASSWORD_DEV\""
              echo "cf_user = \"$CF_USERNAME_DEV\""
              echo "cf_space_name = \"tanf-dev\""
              echo "cf_app_name = \"CF_APP\""
            } >> ./variables.tfvars
      - terraform/init:
          path: ./terraform/dev
          backend_config_file: ./backend_config.tfvars
      - terraform/validate:
          path: ./terraform/dev
      - terraform/fmt:
          path: ./terraform/dev
      - terraform/plan:
          path: ./terraform/dev
          var_file: ./variables.tfvars
      - terraform/apply:
          path: ./terraform/dev
          var_file: ./variables.tfvars

  deploy:
    executor: docker-executor
    working_directory: ~/tdp-deploy
    steps:
      - deploy-cloud-dot-gov

  secrets-check:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: "git-secrets: Scan repository for committed secrets"
          command: ./scripts/git-secrets-check.sh
      - run:
          name: "trufflehog: Scan repository for committed secrets"
          command: ./scripts/trufflehog-check.sh $CIRCLE_BRANCH

  test-backend:
    executor: machine-executor
    steps:
      - checkout
      - docker-compose-check
      - docker-compose-up-backend
      - run:
          name: Execute Python Linting Test
          command: cd tdrs-backend; docker-compose run --rm web bash -c "flake8 ."
      - run:
          name: Run Unit Tests And Create Code Coverage Report
          command: |
            cd tdrs-backend;
            docker-compose run --rm web bash -c "./wait_for_services.sh && pytest --cov-report=xml"
      - upload-codecov:
          component: backend
          coverage-report: ./tdrs-backend/coverage.xml

  test-frontend:
    executor: machine-executor
    working_directory: ~/tdp-apps
    steps:
      - checkout
      - install-nodejs-machine
      - disable-npm-audit
      - install-nodejs-packages:
          app-dir: tdrs-frontend
      - run:
          name: Run ESLint
          command: cd tdrs-frontend; npm run lint
      - run:
          name: Run Pa11y Accessibility Tests
          command: cd tdrs-frontend; mkdir pa11y-screenshots/; npm run test:accessibility
      - run:
          name: Run Jest Unit Tests
          command: cd tdrs-frontend; npm run test:ci
      - upload-codecov:
          component: frontend
          coverage-report: ./tdrs-frontend/coverage/lcov.info
      - store_artifacts:
          path: tdrs-frontend/pa11y-screenshots/

parameters:
  run_dev_deployment:
    type: boolean
    default: false

  run_owasp_scan:
    type: boolean
    default: false

  target_env:
    type: string
    default: ''

workflows:
  build-and-test:
    unless:
      or:
        - << pipeline.parameters.run_dev_deployment >>
        - << pipeline.parameters.run_owasp_scan >>
    jobs:
      - secrets-check
      - test-frontend:
          requires:
            - secrets-check
      - test-backend:
          requires:
            - secrets-check

  dev-deployment:
    jobs:
      - deploy-infrastructure
      - deploy:
          requires:
            - deploy-infrastructure
